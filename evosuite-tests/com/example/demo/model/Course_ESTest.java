/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 23 20:15:14 GMT 2023
 */

package com.example.demo.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.example.demo.model.Course;
import com.example.demo.model.CourseSchedule;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Course_ESTest extends Course_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Course.CourseBuilder course_CourseBuilder0 = new Course.CourseBuilder();
      Course.CourseBuilder course_CourseBuilder1 = course_CourseBuilder0.schedule((List<CourseSchedule>) null);
      assertSame(course_CourseBuilder0, course_CourseBuilder1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Course.CourseBuilder course_CourseBuilder0 = new Course.CourseBuilder();
      Course.CourseBuilder course_CourseBuilder1 = course_CourseBuilder0.units(0);
      assertSame(course_CourseBuilder0, course_CourseBuilder1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Course.CourseBuilder course_CourseBuilder0 = Course.builder();
      Course.CourseBuilder course_CourseBuilder1 = course_CourseBuilder0.id((-2634));
      assertSame(course_CourseBuilder0, course_CourseBuilder1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Course.CourseBuilder course_CourseBuilder0 = new Course.CourseBuilder();
      String string0 = course_CourseBuilder0.toString();
      assertEquals("Course.CourseBuilder(id=0, name=null, units=0, schedule=null, prerequisites=null)", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Course.CourseBuilder course_CourseBuilder0 = new Course.CourseBuilder();
      Course.CourseBuilder course_CourseBuilder1 = course_CourseBuilder0.name("gCkm)Ar=");
      assertSame(course_CourseBuilder0, course_CourseBuilder1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Course.CourseBuilder course_CourseBuilder0 = new Course.CourseBuilder();
      Course.CourseBuilder course_CourseBuilder1 = course_CourseBuilder0.prerequisites((List<Integer>) null);
      assertSame(course_CourseBuilder0, course_CourseBuilder1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Course.CourseBuilder course_CourseBuilder0 = new Course.CourseBuilder();
      Course course0 = course_CourseBuilder0.build();
      Course course1 = course0.clone();
      assertEquals(0, course1.getId());
      assertEquals(0, course1.getUnits());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Course.CourseBuilder course_CourseBuilder0 = new Course.CourseBuilder();
      Course course0 = course_CourseBuilder0.build();
      course0.setId(650);
      assertEquals(650, course0.getId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Course.CourseBuilder course_CourseBuilder0 = Course.builder();
      Course course0 = course_CourseBuilder0.build();
      course0.getName();
      assertEquals(0, course0.getUnits());
      assertEquals(0, course0.getId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Course.CourseBuilder course_CourseBuilder0 = Course.builder();
      Course course0 = course_CourseBuilder0.build();
      course0.setSchedule((List<CourseSchedule>) null);
      assertEquals(0, course0.getUnits());
      assertEquals(0, course0.getId());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Course.CourseBuilder course_CourseBuilder0 = Course.builder();
      Course course0 = course_CourseBuilder0.build();
      course0.getSchedule();
      assertEquals(0, course0.getId());
      assertEquals(0, course0.getUnits());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Course.CourseBuilder course_CourseBuilder0 = Course.builder();
      Course course0 = course_CourseBuilder0.build();
      int int0 = course0.getUnits();
      assertEquals(0, course0.getId());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Course.CourseBuilder course_CourseBuilder0 = Course.builder();
      Course course0 = course_CourseBuilder0.build();
      course0.setPrerequisites((List<Integer>) null);
      assertEquals(0, course0.getId());
      assertEquals(0, course0.getUnits());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Course.CourseBuilder course_CourseBuilder0 = Course.builder();
      Course course0 = course_CourseBuilder0.build();
      int int0 = course0.getId();
      assertEquals(0, int0);
      assertEquals(0, course0.getUnits());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Course.CourseBuilder course_CourseBuilder0 = Course.builder();
      Course course0 = course_CourseBuilder0.build();
      course0.setName("JgG+PmJ093~ X;");
      assertEquals(0, course0.getId());
      assertEquals(0, course0.getUnits());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Course.CourseBuilder course_CourseBuilder0 = new Course.CourseBuilder();
      Course course0 = course_CourseBuilder0.build();
      course0.setUnits(0);
      assertEquals(0, course0.getUnits());
      assertEquals(0, course0.getId());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Course.CourseBuilder course_CourseBuilder0 = Course.builder();
      Course course0 = course_CourseBuilder0.build();
      course0.getPrerequisites();
      assertEquals(0, course0.getUnits());
      assertEquals(0, course0.getId());
  }
}
