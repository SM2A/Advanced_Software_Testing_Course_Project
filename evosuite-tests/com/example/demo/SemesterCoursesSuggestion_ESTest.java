/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 23 20:15:10 GMT 2023
 */

package com.example.demo;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.example.demo.SemesterCoursesSuggestion;
import com.example.demo.model.Course;
import com.example.demo.model.CourseSchedule;
import com.example.demo.model.Grade;
import java.time.DayOfWeek;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SemesterCoursesSuggestion_ESTest extends SemesterCoursesSuggestion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SemesterCoursesSuggestion semesterCoursesSuggestion0 = new SemesterCoursesSuggestion();
      LinkedList<Course> linkedList0 = new LinkedList<Course>();
      LinkedList<CourseSchedule> linkedList1 = new LinkedList<CourseSchedule>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      CourseSchedule courseSchedule0 = mock(CourseSchedule.class, new ViolatedAssumptionAnswer());
      doReturn(dayOfWeek0, dayOfWeek0).when(courseSchedule0).getDayOfWeek();
      doReturn(1152, (-1211)).when(courseSchedule0).getEndHour();
      doReturn((-1211), 374).when(courseSchedule0).getEndMinute();
      doReturn((-1211), (-1211)).when(courseSchedule0).getStartHour();
      doReturn(374, 374).when(courseSchedule0).getStartMinute();
      linkedList1.add(courseSchedule0);
      Course course0 = new Course(1152, "", (-1211), linkedList1, linkedList2);
      linkedList0.add(course0);
      linkedList0.add(course0);
      List<Course> list0 = semesterCoursesSuggestion0.suggestedCourses(linkedList0, (-202.4269F));
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SemesterCoursesSuggestion semesterCoursesSuggestion0 = new SemesterCoursesSuggestion();
      LinkedList<Course> linkedList0 = new LinkedList<Course>();
      LinkedList<CourseSchedule> linkedList1 = new LinkedList<CourseSchedule>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      DayOfWeek dayOfWeek0 = DayOfWeek.FRIDAY;
      CourseSchedule courseSchedule0 = mock(CourseSchedule.class, new ViolatedAssumptionAnswer());
      doReturn(dayOfWeek0, dayOfWeek0).when(courseSchedule0).getDayOfWeek();
      doReturn(0, (-2137741262)).when(courseSchedule0).getEndHour();
      doReturn((-1211), 374).when(courseSchedule0).getEndMinute();
      doReturn((-2137741262), (-1211)).when(courseSchedule0).getStartHour();
      doReturn(374, 1993).when(courseSchedule0).getStartMinute();
      linkedList1.add(courseSchedule0);
      Course course0 = new Course(0, "", (-1211), linkedList1, linkedList2);
      linkedList0.add(course0);
      linkedList0.add(course0);
      List<Course> list0 = semesterCoursesSuggestion0.suggestedCourses(linkedList0, (-202.4269F));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SemesterCoursesSuggestion semesterCoursesSuggestion0 = new SemesterCoursesSuggestion();
      LinkedList<Course> linkedList0 = new LinkedList<Course>();
      LinkedList<CourseSchedule> linkedList1 = new LinkedList<CourseSchedule>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      DayOfWeek dayOfWeek0 = DayOfWeek.THURSDAY;
      CourseSchedule courseSchedule0 = mock(CourseSchedule.class, new ViolatedAssumptionAnswer());
      doReturn(dayOfWeek0, dayOfWeek0, dayOfWeek0, dayOfWeek0).when(courseSchedule0).getDayOfWeek();
      doReturn(0, 0, 0, 1152).when(courseSchedule0).getEndHour();
      doReturn(0, 1152, 1152, 0).when(courseSchedule0).getEndMinute();
      doReturn(0, 0, 115746, 1982292598).when(courseSchedule0).getStartHour();
      doReturn(1152, 0, (-1054), (-807)).when(courseSchedule0).getStartMinute();
      linkedList1.add(courseSchedule0);
      DayOfWeek dayOfWeek1 = DayOfWeek.FRIDAY;
      DayOfWeek dayOfWeek2 = DayOfWeek.FRIDAY;
      CourseSchedule courseSchedule1 = mock(CourseSchedule.class, new ViolatedAssumptionAnswer());
      doReturn(dayOfWeek1, dayOfWeek1, dayOfWeek2, dayOfWeek1).when(courseSchedule1).getDayOfWeek();
      doReturn(1683, 0, 1683, 0).when(courseSchedule1).getEndHour();
      doReturn(0, (-1290), 1198, 0).when(courseSchedule1).getEndMinute();
      doReturn(0, 0, (-1054), (-1968526677)).when(courseSchedule1).getStartHour();
      doReturn((-2146899369), (-1712), (-999), 490).when(courseSchedule1).getStartMinute();
      linkedList1.offerLast(courseSchedule1);
      Course course0 = new Course(0, "", 1152, linkedList1, linkedList2);
      linkedList0.add(course0);
      linkedList0.add(course0);
      List<Course> list0 = semesterCoursesSuggestion0.suggestedCourses(linkedList0, 1152);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SemesterCoursesSuggestion semesterCoursesSuggestion0 = new SemesterCoursesSuggestion();
      LinkedList<Course> linkedList0 = new LinkedList<Course>();
      LinkedList<CourseSchedule> linkedList1 = new LinkedList<CourseSchedule>();
      DayOfWeek dayOfWeek0 = DayOfWeek.THURSDAY;
      CourseSchedule courseSchedule0 = mock(CourseSchedule.class, new ViolatedAssumptionAnswer());
      doReturn(dayOfWeek0, dayOfWeek0, dayOfWeek0, dayOfWeek0).when(courseSchedule0).getDayOfWeek();
      doReturn(24, 5158, 1167, (-142)).when(courseSchedule0).getEndHour();
      doReturn(5158, 1167, 1806, 6).when(courseSchedule0).getEndMinute();
      doReturn(1167, (-292), (-1142), 418).when(courseSchedule0).getStartHour();
      doReturn(24, (-1), (-292), (-2385)).when(courseSchedule0).getStartMinute();
      linkedList1.add(courseSchedule0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Course course0 = new Course(24, "", 1167, linkedList1, linkedList2);
      linkedList0.add(course0);
      linkedList0.add(course0);
      linkedList0.add(course0);
      List<Course> list0 = semesterCoursesSuggestion0.suggestedCourses(linkedList0, 1167);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SemesterCoursesSuggestion semesterCoursesSuggestion0 = new SemesterCoursesSuggestion();
      LinkedList<Course> linkedList0 = new LinkedList<Course>();
      LinkedList<CourseSchedule> linkedList1 = new LinkedList<CourseSchedule>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Course course0 = new Course(30, "mQeU>tP u<3ld1a37-^", 30, linkedList1, linkedList2);
      linkedList0.add(course0);
      semesterCoursesSuggestion0.sortNameUnit(linkedList0);
      assertTrue(linkedList0.contains(course0));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SemesterCoursesSuggestion semesterCoursesSuggestion0 = new SemesterCoursesSuggestion();
      LinkedList<Grade> linkedList0 = new LinkedList<Grade>();
      Grade grade0 = mock(Grade.class, new ViolatedAssumptionAnswer());
      doReturn((Double) null).when(grade0).getGrade();
      doReturn(0).when(grade0).getId();
      doReturn((String) null).when(grade0).toString();
      linkedList0.offerLast(grade0);
      LinkedHashSet<Course> linkedHashSet0 = new LinkedHashSet<Course>();
      LinkedList<Course> linkedList1 = new LinkedList<Course>(linkedHashSet0);
      // Undeclared exception!
      try { 
        semesterCoursesSuggestion0.calculateAverageGrade(linkedList0, linkedList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.example.demo.SemesterCoursesSuggestion", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[1];
      SemesterCoursesSuggestion.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }
}
